# Copyright (C) 2010-2015 Cuckoo Foundation.
# This file is part of Cuckoo Sandbox - http://www.cuckoosandbox.org
# See the file 'docs/LICENSE' for copying permission.

import sys
import socket
import logging
from bson import BSON
from lib.core.config import Config

log = logging.getLogger()

def get_key(pos):
    return pos*2

def get_value(pos):
    return pos*2+1

class ResultLogger():
    def __init__(self):
        self.config = None
        self.ip = None
        self.port = None
        self.socket = None
        
    def announce_netlog(self):
        buf = "BSON\n"
        self.log_raw_direct(buf)
        
    def log_raw_direct(self, buf):
        total = 0
        while total < len(buf):
            sent = self.socket.send(buf[total:])
            if sent == 0:
                raise RuntimeError("socket connection broken")
            total = total + sent
            
    def loq(self, index, name, is_success, return_value, fmt, *args):
        # Prepare structure to be send in dictionary.
        buf = {}
        buf["I"] = index
        buf["name"] = name
        buf["type"] = "info"
        buf["args"] = ["is_success", "retval"]
        
        # Extract arguments.
        for i in range(0,len(fmt)):
            val = unicode(args[get_key(i)])
            buf["args"].append(val)
        log.debug("Sending: %s", str(buf))
        
        # Send BSON data to resultserver
        self.log_raw_direct(BSON.encode(buf))
        
        # Thread info
        buf = {}
        buf["I"] = index
        buf["T"] = 999
        buf["t"] = -1
        buf["args"] = [is_success, return_value]
        
        # Extract argument values.
        for i in range(0,len(fmt)):
            if fmt[i] == "l":
                val = long(args[get_value(i)])
            elif fmt[i] == "u":
                val = unicode(args[get_value(i)])
            buf["args"].append(val)
        log.debug("Sending: %s", str(buf))
        
        # Send BSON data to resultserver
        self.log_raw_direct(BSON.encode(buf))

    def log_new_process(self,pid,ppid):
        self.loq(0,"__process__",1,0, "llllu",
        "TimeLow", "-1404888711", 
        "TimeHigh", "30420798",
        "ProcessIdentifier", "999",
        "ParentProcessIdentifier", "777",
        "ModulePath", "PATH")
                
    def log_init(self):
        '''Establish a connection to resultserver.
        @return: connection result (true or false)'''
        # Parse the analysis configuration file generated by the agent.
        self.config = Config(cfg="analysis.conf")
        
        # Extract result server IP and Port. 
        self.ip = self.config.ip
        self.port = self.config.port
        
        try:
            # Create socket.
            self.socket = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM)
            
            # Connect to result server
            self.socket.connect((self.ip, self.port))
        except socket.error as e:
            log.error(e)
            return False
        
        self.announce_netlog()
        self.log_new_process(0, 0)
        
        return True
    
    