# Copyright (C) 2010-2015 Cuckoo Foundation.
# This file is part of Cuckoo Sandbox - http://www.cuckoosandbox.org
# See the file 'docs/LICENSE' for copying permission.

import sys
import time
import socket
import logging
from bson import BSON
from lib.core.config import Config
from threading import Lock
from ptrace.syscall import SYSCALL_NAMES

log = logging.getLogger()



def get_key(pos):
    return pos*2

def get_value(pos):
    return pos*2+1

class ResultLogger():
    def __init__(self):
        self.config = None
        self.ip = None
        self.port = None
        self.socket = None
        self.send_lock = Lock()
        self.logtbl_explained = []
        self.syscalls = SYSCALL_NAMES
        for i in range(0,512):
            self.logtbl_explained.append(0)

    def announce_netlog(self):
        buf = "BSON\n"
        self.log_raw_direct(buf)
        
    def log_raw_direct(self, buf):
        total = 0
        while total < len(buf):
            sent = self.socket.send(buf[total:])
            if sent == 0:
                raise RuntimeError("socket connection broken")
            total = total + sent
            
    def loq(self, index, name, is_success, return_value, fmt, *args):
        # *args and **kwags explanation:
        # http://stackoverflow.com/questions/1769403/understanding-kwargs-in-python

        with self.send_lock:
            # Prepare structure explanation to be send in dictionary.
            try:
                if self.logtbl_explained[index] == 0:
                    self.logtbl_explained = 1
                    buf = {}
                    buf["I"] = index
                    buf["name"] = name
                    buf["type"] = "info"
                    buf["args"] = ["is_success", "retval"]

                    # Extract arguments.
                    for i in range(0,len(fmt)):
                        val = unicode(args[get_key(i)])
                        buf["args"].append(val)
                    log.debug("Sending: %s", str(buf))

                    # Send BSON data to resultserver
                    self.log_raw_direct(BSON.encode(buf))

            except IndexError as e:
                log.error("Syscall array probably to small: %s", e)

            # Thread info
            buf = {}
            buf["I"] = index
            buf["T"] = 999
            buf["t"] = -1
            buf["args"] = [is_success, return_value]

            # Extract argument values.
            for i in range(0,len(fmt)):
                if fmt[i] == "l":
                    val = long(args[get_value(i)])
                elif fmt[i] == "u":
                    val = unicode(args[get_value(i)])
                buf["args"].append(val)
            log.debug("Sending: %s", str(buf))

            # Send BSON data to resultserver
            self.log_raw_direct(BSON.encode(buf))

    def log_new_process(self,pid,ppid,path):
        self.loq(511,"__process__",1,0, "lllu",
        "TimeStamp", long(round(time.time() * 1000)),
        "ProcessIdentifier", pid,
        "ParentProcessIdentifier", ppid,
        "ModulePath", path)

        log.debug("RESOLVE_INDEX: %d", self.log_resolve_index("kill"))

    def log_init(self):
        '''Establish a connection to resultserver.
        @return: connection result (true or false)'''
        # Parse the analysis configuration file generated by the agent.
        self.config = Config(cfg="analysis.conf")

        # Extract result server IP and Port. 
        self.ip = self.config.ip
        self.port = self.config.port

        try:
            # Create socket.
            self.socket = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM)

            # Connect to result server
            self.socket.connect((self.ip, self.port))
        except socket.error as e:
            log.error(e)
            return False

        self.announce_netlog()
        #self.log_new_process(0, 0)

        return True

    def log_resolve_index(self, name):
        for index, value in self.syscalls.items():
            if value == name:
                return index
        return -1
